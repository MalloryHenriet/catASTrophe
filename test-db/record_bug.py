# Record the bugs encounter (crashes and logic)
#
# 1. original_test.sql: This file contains the original (unreduced) SQL query
# that triggered the bug. It must be the exact query generated by your tool, without any manual modifications.
#
# 2. reduced_test.sql: This file contains a manually minimized version of original_test.sql 
# that still triggers the bug. If no reduction is possible, it may be identical to original_test.sql
#
# 3. test.db: This is the SQLite database that original_test.sql and reduced_test.sql operated 
# on when the bug was triggered.
#
# 4. README.md: A README file describing the expected results of the database engine vs. its actual one.
#
# 5. version.txt: This file records the SQLite3 version in which the bug was found.

from utils import create_bug_folder, write_file
from config import BUG_TYPES

class BugRecorder:
    def __init__(self):
        pass

    def report_bug(self, query, version, bug_type):
        # TODO: implement
        path = create_bug_folder()

        # 1.
        write_file(path, "original_test.sql", query)

        # 2. TO WRITE MANUALLY FOR EACH BUGS

        # 3.
        write_file(path, "test.db", "This is the test db")

        # 4.
        if bug_type == BUG_TYPES[0]:
            write_file(path, "README.md", "The SQL engine crashed on the given query")
        elif bug_type == BUG_TYPES[1]:
            write_file(path, "README.md", "The SQL engine encounter a logic bug")

        # 5.
        write_file(path, "version.txt", version)